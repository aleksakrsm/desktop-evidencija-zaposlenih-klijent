/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package psproject_v5.ui.form.panel.impl;

import java.util.List;
import javax.swing.JComboBox;
import psproject_v5.ui.form.panel.IPanelComponent;

/**
 *
 * @author aleks
 */
public class PnlCombobox extends javax.swing.JPanel implements IPanelComponent {

    /**
     * Creates new form PnlCombobox
     */
    public PnlCombobox() {
        initComponents();
        preparePanel();
    }
    private boolean optional = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStaticText = new javax.swing.JLabel();
        cmbInput = new javax.swing.JComboBox<>();
        lblErrorText = new javax.swing.JLabel();

        lblStaticText.setText("Static:");

        lblErrorText.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStaticText, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                        .addGap(84, 84, 84)
                        .addComponent(cmbInput, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(90, 90, 90))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStaticText)
                    .addComponent(cmbInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblErrorText)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> cmbInput;
    private javax.swing.JLabel lblErrorText;
    private javax.swing.JLabel lblStaticText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setStaticText(String staticTxt) {
        lblStaticText.setText(staticTxt);
    }

    @Override
    public void setErrorText(String errorTxt) {
        lblErrorText.setText(errorTxt);
    }

    @Override
    public void preparePanel() {
        setErrorText("");
    }

    @Override
    public Object getValue() {
        return cmbInput.getSelectedItem();
    }

    public void fillCmb(List<Object> items) {
        if (cmbInput.getItemCount() != 0) {
            return;
        }
        for (Object item : items) {
            cmbInput.addItem(item);
        }
    }

    public JComboBox getCmb() {
        return cmbInput;
    }
//    public boolean isCmbEmpty(){
//        return cmbI
//    }

    public boolean isOptional() {
        return optional;
    }

    public void setOptional(boolean optional) {
        this.optional = optional;
    }

    @Override
    public void setValue(Object value) {
        System.out.println(value);
        System.out.println(cmbInput.getItemCount());
        cmbInput.setSelectedItem(value);
    }

    @Override
    public void setPnlVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public void setPnlEnabled(boolean enabled) {
        cmbInput.setEnabled(enabled);
    }

}
