/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package psproject_v5.ui.form.panel.impl;

//import com.mysql.cj.result.LocalDateTimeValueFactory;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import psproject_v5.ui.form.panel.IPanelComponent;

/**
 *
 * @author aleks
 */
public class PnlDate3CMB extends javax.swing.JPanel implements IPanelComponent {

    /**
     * Creates new form PnlDate3CMB
     */
    public PnlDate3CMB() {
        initComponents();
        preparePanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStatic = new javax.swing.JLabel();
        cmbDay = new javax.swing.JComboBox<>();
        cmbMonth = new javax.swing.JComboBox<>();
        cmbYear = new javax.swing.JComboBox<>();
        lblError = new javax.swing.JLabel();

        lblStatic.setText("Static:");

        cmbDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cmbDay.setSelectedIndex(-1);

        lblError.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStatic)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(186, 186, 186))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatic)
                    .addComponent(cmbDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblError)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbDay;
    private javax.swing.JComboBox<Object> cmbMonth;
    private javax.swing.JComboBox<String> cmbYear;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblStatic;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setStaticText(String staticTxt) {
        lblStatic.setText(staticTxt);
    }
    
    @Override
    public void setErrorText(String errorTxt) {
        lblError.setText(errorTxt);
    }
    
    @Override
    public void preparePanel() {
        setErrorText("");
//        setStaticText("");
        fillCmb();
    }
    
    @Override
    public Object getValue() {
        LocalDate localDate = LocalDate.of(Integer.parseInt(cmbYear.getSelectedItem().toString()),
                (Month)cmbMonth.getSelectedItem(),
                Integer.parseInt(cmbDay.getSelectedItem().toString()));
        
        return localDate;
        }
    
    private void fillCmb() {
        fillCmbDay();
        fillCmbMonth();
        fillCmbYear();
        cmbDay.setSelectedItem(null);
        cmbMonth.setSelectedItem(null);
        cmbYear.setSelectedItem(null);
    }
    
    private void fillCmbDay() {
        cmbDay.removeAllItems();
        for (int i = 1; i <= 31; i++) {
            cmbDay.addItem(i + "");
        }
    }
    
    private void fillCmbMonth() {
        for (Month value : Month.values()) {
            cmbMonth.addItem(value);
        }
    }
    
    private void fillCmbYear() {
        for (int i = 1930; i <= 2022; i++) {
            cmbYear.addItem(i + "");
        }
    }

    @Override
    public void setValue(Object value) {
        LocalDate date = LocalDate.parse(value.toString());
        cmbDay.setSelectedItem(date.getDayOfMonth()+"");
        
        cmbMonth.setSelectedItem(date.getMonth());
        cmbYear.setSelectedItem(date.getYear()+"");
    }

    @Override
    public void setPnlEnabled(boolean enabled) {
        cmbDay.setEnabled(enabled);
        cmbMonth.setEnabled(enabled);
        cmbYear.setEnabled(enabled);
    }

    @Override
    public void setPnlVisible(boolean visible) {
        setVisible(visible);
    }
}
