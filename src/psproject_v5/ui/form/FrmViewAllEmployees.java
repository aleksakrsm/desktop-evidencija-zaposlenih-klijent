/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package psproject_v5.ui.form;

import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import psproject_v5.communication.ObjectWrapper;
import psproject_v5.constants.MyConstants;
import psproject_v5.controller.Controller;
import psproject_v5.help.Helper;
import psproject_v5.domain.AcademicTitle;
import psproject_v5.domain.Department;
import psproject_v5.domain.EducationTitle;
import psproject_v5.domain.Employee;
import psproject_v5.domain.Status;
import psproject_v5.session.Session;
import psproject_v5.ui.components.table.cellEditors.DateCellEditor;
import psproject_v5.ui.components.table.cellEditors.MyCmbCellEditor;
import psproject_v5.ui.components.table.model.TableModelDepartments;
import psproject_v5.ui.components.table.model.TableModelEmployees;
import psproject_v5.ui.form.function.IUpdateView;
import psproject_v5.ui.form.util.FormMode;
import psproject_v5.domain.IEntity;
import psproject_v5.exception.ValidatorException;
import psproject_v5.ui.components.validator.IValidator;
import psproject_v5.ui.components.validator.impl.RequiredCapitalisedNameValidator;

/**
 *
 * @author aleks
 */
public class FrmViewAllEmployees extends javax.swing.JDialog implements IUpdateView{

    private List<Employee> employees;
    private List<Employee> employeesFiltered;
    private List<Department> departments;
    private List<AcademicTitle> academicTitles;
    private List<EducationTitle> educationTitles;

    private Employee employee;

    /**
     * Creates new form FrmViewAllEmployees
     */
    public FrmViewAllEmployees(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            setLocationRelativeTo(null);
            
            employees = Controller.getInstance().getAllEmployees();            
            departments = Controller.getInstance().getAllDepartments();            
            academicTitles = Controller.getInstance().getAllAcademicTitles();            
            educationTitles = Controller.getInstance().getAllEducationTitles();
            
            initComponents();
            prepareForm();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployees = new javax.swing.JTable();
        cmbStatus = new javax.swing.JComboBox<>();
        btnDetails = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        cmbDepartments = new javax.swing.JComboBox<>();
        btnFilterByDepartment = new javax.swing.JButton();
        btnSaveAdded = new javax.swing.JButton();
        btnRemoveFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employees");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblEmployees);

        cmbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStatusActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        cmbDepartments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDepartmentsActionPerformed(evt);
            }
        });

        btnFilterByDepartment.setText("Filter By Department");
        btnFilterByDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterByDepartmentActionPerformed(evt);
            }
        });

        btnSaveAdded.setText("SAVE NEW EMPLOYEE");
        btnSaveAdded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAddedActionPerformed(evt);
            }
        });

        btnRemoveFilter.setText("Remove Filter");
        btnRemoveFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSaveAdded)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemoveFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFilterByDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbDepartments, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterByDepartment)
                    .addComponent(cmbDepartments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemoveFilter)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnSaveAdded))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDetails)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStatusActionPerformed
        try {
            populateTable();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbStatusActionPerformed

    private void btnFilterByDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterByDepartmentActionPerformed

        try {
            Department departmentFilter = (Department) cmbDepartments.getSelectedItem();
            if (departmentFilter == null) {
                return;
            }
            populateTable();
            btnRemoveFilter.setEnabled(true);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnFilterByDepartmentActionPerformed

    private void cmbDepartmentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDepartmentsActionPerformed
        btnFilterByDepartment.setEnabled(true);
    }//GEN-LAST:event_cmbDepartmentsActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        TableModelEmployees tableModel = (TableModelEmployees) tblEmployees.getModel();
        employee = tableModel.addEmployee();
        btnSaveAdded.setVisible(true);
        btnAdd.setEnabled(false);

        btnDetails.setEnabled(false);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveAddedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAddedActionPerformed
        try {
            if (validate(employee)) {
                employee.setStatus(Status.ACTIVE);
                
                Controller.getInstance().add(employee);
                
                TableModelEmployees tableModel = (TableModelEmployees) tblEmployees.getModel();
                Session.getInstance().addItem("tableModelEmployees", tableModel);
                
                tableModel.fireTableDataChanged();
                employees.add(employee);
                populateTable();///ovo resava problem dodavanja u tabelu odmah po kreiranju
                btnAdd.setEnabled(true);

                btnDetails.setEnabled(true);

                btnSaveAdded.setVisible(false);
            } else {
//                System.out.println("ne valja unos");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveAddedActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        int selected = tblEmployees.getSelectedRow();
        if (selected != -1) {
            TableModelEmployees tableModel = (TableModelEmployees) tblEmployees.getModel();
            Employee employee = tableModel.getEmployees().get(selected);
            Session.getInstance().addItem("employee", employee);
            Session.getInstance().addItem("tableModelEmployees", tableModel);
            FrmEmployee frmEmployee = new FrmEmployee(null, true, FormMode.VIEW_MODE);
            Helper.centerDialog(frmEmployee);
            frmEmployee.setVisible(true);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnRemoveFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFilterActionPerformed

        try {
            cmbDepartments.setSelectedItem(null);
            populateTable();
            btnRemoveFilter.setEnabled(false);
            btnFilterByDepartment.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRemoveFilterActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Session.getInstance().addItem(MyConstants.CURRENT_JDIALOG, this);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Session.getInstance().removeItem(MyConstants.CURRENT_JDIALOG);
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnFilterByDepartment;
    private javax.swing.JButton btnRemoveFilter;
    private javax.swing.JButton btnSaveAdded;
    private javax.swing.JComboBox<Object> cmbDepartments;
    private javax.swing.JComboBox<Status> cmbStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEmployees;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() throws SQLException {
        cmbStatus.setModel(new DefaultComboBoxModel<>(Status.values()));
        cmbStatus.setSelectedItem(Status.ACTIVE);

        btnSaveAdded.setVisible(false);
        btnRemoveFilter.setEnabled(false);

        cmbDepartments.setModel(new DefaultComboBoxModel<>(departments.toArray()));
        cmbDepartments.setSelectedItem(null);

        populateTable();

        setColumnWidths();

        btnFilterByDepartment.setEnabled(false);
    }

    private void populateTable() throws SQLException {

        employeesFiltered = filterEmployeesByStatus();
        if (cmbDepartments.getSelectedItem() != null) {
            employeesFiltered = filterByDepartment();
        }

        TableModelEmployees tableModelEmployees = new TableModelEmployees(employeesFiltered, true);

        tblEmployees.setModel(tableModelEmployees);

        setCellEditors();

    }

    private List<Employee> filterByDepartment() {
        List<Employee> list = new ArrayList<>();
        Department departmentFilter = (Department) cmbDepartments.getSelectedItem();
        if (departmentFilter == null) {
            return employeesFiltered;
        }

        for (Employee employee1 : employeesFiltered) {
            if (employee1.getDepartment().getId() == departmentFilter.getId()) {
                list.add(employee1);
            }
        }
        return list;
    }

    private List<Employee> filterEmployeesByStatus() {
        if (employees == null) {
            return null;
        }
        List<Employee> list = new ArrayList<>();
        Status statusFilter = (Status) cmbStatus.getSelectedItem();
        for (Employee employee : employees) {
            if (employee.getStatus().equals(statusFilter)) {
                list.add(employee);
            }
        }
        return list;
    }

    private void setCellEditors() {
        TableColumnModel columnModel = tblEmployees.getColumnModel();
        TableColumn departmentColumn = columnModel.getColumn(4);
        List<Object> listOfObjects = new ArrayList<>(departments);
        departmentColumn.setCellEditor(new MyCmbCellEditor(listOfObjects));

        TableColumn educationTitleColumn = columnModel.getColumn(6);
        JComboBox cmbEdTitles = new JComboBox<>(educationTitles.toArray());
        cmbEdTitles.addItem(null);
        listOfObjects = new ArrayList<>(educationTitles);
        listOfObjects.add(null);
        educationTitleColumn.setCellEditor(new MyCmbCellEditor(listOfObjects));
        cmbEdTitles.setSelectedItem(null);
        listOfObjects = new ArrayList<>(academicTitles);
        TableColumn academicTitleColumn = columnModel.getColumn(5);
        academicTitleColumn.setCellEditor(new MyCmbCellEditor(listOfObjects));

        TableColumn birthdayColumn = columnModel.getColumn(3);
        birthdayColumn.setCellEditor(new DateCellEditor());
    }

    private void setColumnWidths() {
        TableColumnModel columnModel = tblEmployees.getColumnModel();
        columnModel.getColumn(0).setMinWidth(25);
        columnModel.getColumn(0).setPreferredWidth(25);
        columnModel.getColumn(0).setMaxWidth(50);

        columnModel.getColumn(1).setMinWidth(60);
        columnModel.getColumn(1).setPreferredWidth(60);
        columnModel.getColumn(1).setMaxWidth(100);

        columnModel.getColumn(2).setMinWidth(100);
        columnModel.getColumn(2).setPreferredWidth(100);
        columnModel.getColumn(2).setMaxWidth(100);

        columnModel.getColumn(3).setMinWidth(90);
        columnModel.getColumn(3).setPreferredWidth(90);
        columnModel.getColumn(3).setMaxWidth(90);

        columnModel.getColumn(4).setMinWidth(80);
        columnModel.getColumn(4).setPreferredWidth(90);
        columnModel.getColumn(4).setMaxWidth(100);

        columnModel.getColumn(5).setMinWidth(100);
        columnModel.getColumn(5).setPreferredWidth(100);
        columnModel.getColumn(5).setMaxWidth(100);

        columnModel.getColumn(6).setMinWidth(50);
        columnModel.getColumn(6).setPreferredWidth(50);
        columnModel.getColumn(6).setMaxWidth(90);
    }

    private boolean validate(Employee employee) throws ValidatorException {
        if (employee == null || employee.getFirstname() == null || employee.getLastname() == null || employee.getBirthday() == null
                || employee.getDepartment() == null || employee.getAcademicTitle() == null) {
            return false;
        }
        IValidator validator = new RequiredCapitalisedNameValidator();
        validator.validate(employee.getFirstname());
        validator.validate(employee.getLastname());
        return true;
    }
    
    @Override
    public void newEntity(IEntity o) throws Exception{
        Employee employee = null;
    
        if(o!=null && (o instanceof Employee))
            employee = (Employee) o;
        else
            return;
        
        TableModelEmployees modelEmployees = (TableModelEmployees) tblEmployees.getModel();
        modelEmployees.add(employee);
    }
    @Override
    public void changedEntity(IEntity o) throws Exception{
        Employee employee = null;
    
        if(o!=null && (o instanceof Employee))
            employee = (Employee) o;
        else
            return;
        
        TableModelEmployees modelEmployees = (TableModelEmployees) tblEmployees.getModel();
        
        modelEmployees.editEmployee(employee);
    }

}
